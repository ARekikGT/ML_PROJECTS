# -*- coding: utf-8 -*-
"""P1 : Diabetes Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qB21Mvm79acG_GdIAKACweO-TDiidych

Importing the Dependencies
"""

import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score

"""Data collection and Analysis"""

#loading the diabetes to a pandas dataframe
diabetes_dataset = pd.read_csv('/content/diabetes.csv')

pd.read_csv?

#printing the first 5 row of the dataset
diabetes_dataset.head()

#number of rows and columns in this dataset
diabetes_dataset.shape

#getting the statistical measures of the data
diabetes_dataset.describe()

diabetes_dataset['Outcome'].value_counts()

"""0--> non diabetic
1--> diabetic
"""

diabetes_dataset.groupby('Outcome').mean()

#seperaing the data and labels
X = diabetes_dataset.drop(columns = 'Outcome', axis=1)
Y = diabetes_dataset['Outcome']

print (X)
print(Y)

"""Data Standardization


"""

scaler = StandardScaler()

scaler.fit(X)

standardized_data = scaler.transform(X)

print (standardized_data)

X = standardized_data
Y = diabetes_dataset['Outcome']

print(X)
print (Y)

X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size = 0.2, stratify=Y, random_state=2)

print (X.shape, X_train.shape, X_test.shape)

classifier = svm.SVC(kernel='linear')

#training the support vector machine classifier
classifier.fit(X_train, Y_train)

"""Model evaluation

Accurancy Score
"""

#accurancy score on the training data
X_train_prediction = classifier.predict(X_train)
trainig_data_accuracy = accuracy_score(X_train_prediction, Y_train)

print ('accuracy score of the trainig dtat : ',trainig_data_accuracy)

#accurancy score on the testing data
X_test_prediction = classifier.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction, Y_test)

print ('accuracy score of the testing data : ',test_data_accuracy)

"""Making a Pedictive System"""

input_data = (8,92,88,30,0,45.6,0.87,64)

#changing the input data to numpy array
input_data_as_numpy_array = np.asarray(input_data)

#reshape the array as we are predicting for the one instance
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

#standardise the input data
std_data = scaler.transform(input_data_reshaped)
print (std_data)

prediction = classifier.predict(std_data)
print(prediction)

if (prediction[0] == 0):
  print("the person is not diabetic")
else:
  print("the person is diabetic")