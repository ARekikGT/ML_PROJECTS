# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AeF8WLPWKvq2ReHjOOAPsKs0i-s216Y5

Importation of the Dependencies
"""

import  numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

"""Data Collection and Processing"""

#loading the csv data to a pandas dataframe
heart_data = pd.read_csv('/content/heart.csv')

#print first rows of the dataset
heart_data.head()

#number of the columns and rows
heart_data.shape

#get informations about the dataset
heart_data.info()

#checking for the messing values
heart_data.isnull().sum()

#statistical measures about the data
heart_data.describe()

#checking the distribution of target variable
heart_data['target'].value_counts()

"""1--> defective heart
0--> healthy heart

splitting the features and targets
"""

X = heart_data.drop(columns='target' , axis=1)
Y = heart_data['target']

print (X)

print(Y)

"""splitting the data into training data and test data"""

X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size = 0.2 , stratify = Y, random_state = 2)

print (X_train)
print (X_test)
print (Y_train)
print (Y_test)
print (X_train.shape)
print (X_test.shape)
print (Y_train.shape)
print (Y_test.shape)

"""Model Training
Logistic Regression
"""

model = LogisticRegression()

#training the LogisticRegression model with training data
model.fit(X_train, Y_train)

"""Model Evaluation

Accuracy score
"""

#accuracy on training data
X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)

print('Accuracy on training data : ', training_data_accuracy)

#accuracy on training data
X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction, Y_test)

print('Accuracy on test data : ', test_data_accuracy)

"""Building a predictive System      """

input_data = (22,1,0,95,130,0,1,120,0,0.8,2,1,3)

# change the input data to a numpy array
input_data_as_numpy_array = np.asarray(input_data)

# reshpe the numpy array as we are predicting for only on instance
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

prediction = model.predict(input_data_reshaped)
print (prediction)

if (prediction[0] == 0):
  print('the person does not have a heart disease')
else:
   print('the person has a heart disease')

input_data = (71,1,1,160,240,0,1,240,0,0.8,2,3,3)

# change the input data to a numpy array
input_data_as_numpy_array = np.asarray(input_data)

# reshpe the numpy array as we are predicting for only on instance
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

prediction = model.predict(input_data_reshaped)
print (prediction)

if (prediction[0] == 0):
  print('the person does not have a heart disease')
else:
   print('the person has a heart disease')